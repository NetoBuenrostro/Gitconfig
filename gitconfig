[user]
    name  = 
    email = 



[core]
    editor           = vim
    fileMode = false
    bare             = false
    logallrefupdates = true
    whitespace       = tab-in-indent, trailing-space
    excludesfile     = ~/.gitignore
    # autocrlf [false, input, true]
    autocrlf         = input
    #  lf, crlf and native
    # eol              = native
    # To speed up over NFS
    preloadindex     = true
    pager = less -F -X


[push]
    default = simple

[gc]
  auto    = 1



[alias]
    tg    = tag -l
    ci    = commit
    cim   = !git ci -m

    # Diff commands
    # =============
    dfchk = diff --check                # Check for errors combined with core.whitespace (space, tab ... )
    dc    = diff --cached --histogram
    dc-p  = !git --no-pager dc          # Show cached diff without using a pager
    ds    = diff --staged --histogram
    df    = diff --histogram
    dfw   = diff --word-diff            # Shows the diff only showing the changed words
    dfnp  = !git --no-pager diff        # Shows the diff without using a pager
    dfnb  = !git diff --word-diff-regex=[^[:space:]] # Show the diff ignoring white space or new lines
    # Using external tools
    dftool= difftool                    # Default tool
    dfp4  = difftool --tool=p4merge     # launch diff with p4merge
    dfvim = difftool --tool=vimdiff     # launch diff with vimdiff
    mtool-meld = mergetool --tool=meld
    w     = whatchanged
    wdiff = diff --word-diff=plain
    y     = diff "@{yesterday}"

    st     = status -sb
    st-all = status -sb -uall
    st-u   = diff --name-status --diff-filter=U

    # Remove files from the repository, but not from my current directory
    rmc   = rm --cached

    # Adding files
    # ==================================================================
    track = add -N
    added = add -e
    addp  = add -p
    addi  = add --intent-to-add

    # Runing gitk with git
    k     = !gitk
    ka    = !gitk --all
    kme   = !gitk --all --author=$(git config user.email)



    cp    = cherry-pick -x

    # Branching
    # ==================================================================
    # todo:
    # get current remote name, likely "origin"
    # remote-name=$(git remote)
    # get current branch name
    # push the current branch to the remote
    # git push --set-upstream ${remote-name} ${git currentbranch}
    push-this =  "! \
        set -e; \
        set -u; \
        f() { \
            remote_name=\"$(git remote)\"; \
            echo \"Pushing $(tput bold)$(git currentbranch)$(tput sgr0) branch to $(tput bold)$remote_name$(tput sgr0) remote\"; \
            git push -u \"${remote_name}\" HEAD; \
        }; f"
        #             git push -u \"${remote-name}\" HEAD \

        # git push -u origin HEAD
        # echo \"git push --set-upstream \"${remote-name}\" $(git currentbranch) \"; \

    currentbranch   = "rev-parse --abbrev-ref HEAD"

    co    = checkout            # git co <branch>
    co-re  = !git checkout -b "$(basename $1)"

    # Find commit in branches
    find-commit-in-branches = branch -a --contains

    ## Create a new branch and switch to it ex.: git nb <branch>
    ## Create a new branch based on other and switch to it ex.: git nb <branch> <based branch>
    nb    = checkout -b
    ## Create a new branch without a parent
    nb-orphan = checkout --orphan

    # TODO: Check if there is any parameter passed to the function \
    # Create a new branch and name it with a string that has spaces within
    # Ex. ``git nbs "this is a test branch"`` will create ``this_is_a_test_branch`` based on the current branch
    # Ex. ``git nbs "this is a test branch based on master" master`` will create ``this_is_a_test_branch_based_on_master``
    # We're limiting branch names to 72 characters
    nbs   = "! \
        set -e; \
        set -u; \
        f() { \
            branchName=\"$( echo \"$1\" | sed 's/ - /-/g' | tr -cd '[:alnum:][:blank:]-_' | tr '[:blank:]' '_' | tr '[:upper:]' '[:lower:]' )\"; \
            git checkout -b \"${branchName::72}\" ${2:-}; \
        }; f"
        # git checkout -b ${branch_name} \

    # Create a new branch from string and add the year and month
    # git nbsd 'this is the name of my branch' <from branch>
    nbd = "! \
        set -e; \
        set -u; \
        f() { \
            date_y_m=\"$(date +%Y%m )\"; \
            git nbs \"$date_y_m $1\" ${2:-}; \
        }; f"
    # New release branch
    # nbr
    # New hotfix branch
    # nbhf

    ## Get information from the local branches
    # branch = !git --no-pager branch # Using core.pager 'less -+F -+X' so less will not paginate less than a page
    br    = branch --verbose
    bra   = branch --all
    brr   = branch --remotes
    br-merged = branch --merged # list merged branches
    ## Get information from the remote repositories
    re    = remote -v
    lsbranch     = !git for-each-ref --sort='authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads
    lsbranch-asc = !git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads

    # Branch commands
    # ===============
    # Remove remote branch if git is older than 1.7.0 we can do `git push origin :<branchName>`
    #rmr  = "!f() { git push origin :$1; }; f"
    rmrbranch = push origin --delete
    # Remove the current branch printing the branch commit
    br-remove = branch -D

    # Get the existing branches with extra info
    br-info = "! git branch --no-abbrev --verbose"

    # Search for any branch which include the word
    # debug flags
    #
    get-branch = "!\
        set -e; \
        set -x; \
        set -u; \
        f() { \
            result=\"$( git branch | grep \"$1\" | cut -c3-)\"; \
            if [ ${result:-x} == \"x\" ]; then \
                exit 1; \
            else \
                printf \"${result}\\n\"; \
            fi \
        }; f"

    brsearchall = "! \
        set -e; \
        set -u; \
        f() { \
            BRANCH=$(git get-branch $1); \
            if [ $( printf \"${BRANCH}\" | grep -cve '^\\s*$' ) -ge 1 ]; then \
                echo \"${BRANCH}\"; \
            else \
                echo \"No branch match\"; \
                exit 1; \
            fi; \
        }; f"

    # Debug flags
    #
        # set -x; \
        # set -e; \
    brsearch = "! \
        set -u; \
        f() { \
            BRANCH=$(git get-branch $1); \
            if [ $? -ne 0 ]; then \
                echo \"No branch match\"; \
                exit 1; \
            else \
                match_count=$( printf \"${BRANCH}\" | grep -cve '^\\s*$' ); \
                if [ ${match_count} -eq 1 ]; then \
                    echo \"${BRANCH}\"; \
                else \
                    echo \"Multiple branches match\"; \
                    git brsearchall \"$1\"; \
                    exit 2; \
                fi \
            fi \
        }; f"

    ##
    # Function template
    # Back slashes and semicolon have to be used because git makes one line of
    # the function, omitting them will throw errors
    ##
    # <git alias> = "! \
    #     set -e; \
    #     set -u; \
    #     f() { \
    #         # Bash
    #     }; f"

    brsearchremotes = "! \
        set -e; \
        set -u; \
        f() { \
            BRANCH=$(git branch -r | grep \"$1\" | cut -c3-); \
            if [ $? -ne 0 ]; then \
                echo \"No branch match\"; \
                exit 1; \
            else \
                match_count=$( printf \"${BRANCH}\" | grep -cve '^\\s*$' ); \
                if [ ${match_count} -eq 1 ]; then \
                    echo \"${BRANCH}\"; \
                else \
                    echo \"Multiple branches match\"; \
                    echo \"${BRANCH}\"; \
                    exit 2; \
                fi \
            fi \
        }; f"

    # checkout for a branch with a specific identifier
    # Debug flags
        # set -e; \
        # set -x; \

    cobr = "!\
        set -u; \
        f(){ \
            BRANCH=$( git brsearch \"$1\" ); \
            if [ $? -ne 0 ]; then \
                printf \"${BRANCH}\\n\"; \
            else \
                git co \"${BRANCH}\"; \
            fi \
        }; f"

    # checkout for a branch with a specific identifier
    #cobr = "!_f(){ BRANCH=\"$(git brsearch \"$1\")\" || { echo \"$BRANCH\"; exit 1;}; git co \"$BRANCH\"; }; _f"
    corbr = "!\
        set -u; \
        f(){ \
            BRANCH=$( git brsearchremotes \"$1\" | grep -Poe '^[^/]+/\\K.*' ); \
            printf \"${BRANCH}\\n\"; \
            if [ $? -ne 0 ]; then \
                printf \"${BRANCH}\\n\"; \
            else \
                git co \"${BRANCH}\"; \
            fi \
        }; f"

    # Merge aliases
    # =============
    mff   = merge --ff-only
    mrp   = merge --strategy-option=patience
    plr   = pull --rebase

    ##
    # make Branch A resolve conflicts to branch b
    # https://stackoverflow.com/questions/173919/is-there-a-theirs-version-of-git-merge-s-ours#answer-4969679
    ##
    # TODO: make script
    # # in case branchA is not our current branch
    # git checkout branchA

    # # make merge commit but without conflicts!!
    # # the contents of 'ours' will be discarded later
    # git merge -s ours branchB    

    # # make temporary branch to merged commit
    # git branch branchTEMP         

    # # get contents of working tree and index to the one of branchB
    # git reset --hard branchB

    # # reset to our merged commit but 
    # # keep contents of working tree and index
    # git reset --soft branchTEMP

    # # change the contents of the merged commit
    # # with the contents of branchB
    # git commit --amend

    # # get rid off our temporary branch
    # git branch -D branchTEMP

    # # verify that the merge commit contains only contents of branchB
    # git diff HEAD branchB

    # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/#use_snapshot_stashes
    snapshot = !git stash save --keep-index "snapshot: $(date)"
    # snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    # http://stackoverflow.com/questions/1360712/git-stash-cannot-apply-to-a-dirty-working-tree-please-stage-your-changes#answer-3733698
    unstash  = !git stash show -p | git apply -3 && git stash drop

    ############################################################################
    # Git find files in history
    ############################################################################
    # https://stackoverflow.com/a/372970/1476332
    find = log --all -- 
    # Git find file in branch from author
    # TODO: git log --grep='branch' --author='me' -- *.sql
    # TODO: If you want to see where it's been deleted / created /etc, you can use git log --all --stat -- **/my_file.png
    ############################################################################
    # END - Git find files in history
    ############################################################################

    # Log commands
    # ==================================================================
    # Formating http://git-scm.com/docs/git-log
    # Display the log including the commit content
    lg    = log -p
    # Displays a nice list of commits of the current branch
    lol   = log --graph --decorate --date=relative --oneline
    # Displays a nice list of commits of all the branches
    lola  = log --graph --decorate --date=relative --oneline --all
    # Displays a nice list of commits of the current branch including time, author name and commiter name
    lolc  = log --graph --color --pretty=format:'%C(yellow)%h%Creset - %C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> %ai %C(dim white)<%cn> %ci%Creset'
    # Displays a nice list of commits of all the branches including time, author name and commiter name
    lolac = log --graph --color --pretty=format:'%C(yellow)%h%Creset - %C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> %ai %C(dim white)<%cn> %ci%Creset' --all
    # Looks the same as lolc ... ????
    lolf  = log --graph         --pretty=format:'%C(yellow)%h%Creset - %C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> %ai %C(dim white)<%cn> %ci%Creset' --date=relative
    # git log branch
    lbrl  = !git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads
    lbra  = !git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)'


    # List branches tracking remote branches
    br-tracking     = "!git for-each-ref --format='%(refname:short)' refs/heads/* | while read LOCALBRANCH; do if ORIGIN=$(git config --get branch.$LOCALBRANCH.remote); then REMOTEBRANCH=$(git config --get branch.$LOCALBRANCH.merge); echo \"$LOCALBRANCH  ->  $ORIGIN/${REMOTEBRANCH##*/}\"; fi; done"
    # List branches not tracking remote branches
    br-no-tracking  = "!git for-each-ref --format='%(refname:short)' refs/heads/* | while read LOCALBRANCH; do if ! [ $(git config --get branch.$LOCALBRANCH.remote) ]; then echo \"$LOCALBRANCH\"; fi; done"
    # Interactively removes local branches that are not tracking remote branch
    prune-me = "!git br-no-tracking | while read -r LINE; do printf \"\nDo you want to prune %s? [y/n]\n\" \"$LINE\"; read CONFIRM </dev/tty; case "$CONFIRM" in [yY]) printf \"\nPruning '%s' from local repository ...\n\" \"$LINE\"; git branch -D \"$LINE\";; *) printf \"Skiping %s \n\n\" \"$LINE\";; esac done;"


    # Show my commits only
    log-me      = !git config user.email | xargs -I{} git lolc --author={}

    # Show information about files in the index
    ls          = ls-files

    # Shows the commits comming from the remote before merging them into our branch
    incomming   = "!git remote update -p; git log ..@{u}"
    # See them as a patch
    incomming-p = "!git remote update -p; git log ..@{u} -p"

    # Show what we will be pushing to the remote branch
    outgoing    = log @{u}..

    # Ignoring files
    # ==================================================================
    ## Show files ignored by git:
    ign         = ls-files -o -i --exclude-standard

    ## Ignoring files, undoing and listing
    ignored     = !git ls-files -v | grep "^[[:lower:]]"

    # Ignore changes in a file, if a remote commit has changed the file
    # it will overwrite the file without raise a warning
    # Those are not stored in .gitignore
    ignore      = update-index --assume-unchanged

    # Mark modified files as unchanged
    ignore-modified = "!\
        set -u; \
        f(){ \
            git ls-files --modified -z $* | xargs -0 -I{} git update-index --assume-unchanged {}; \
        }; f"

    # Stop ignoring changes in a file
    unignore    = update-index --no-assume-unchanged

    # Add ignore rules to the .gitignore file
    ignore-file = "!\
        set -u; \
        f(){ \
            for i in $*; do \
                echo $i >> .gitignore; \
            done \
        }; f"

    #   hide = update-index --assume-unchanged
    #   unhide = update-index --no-assume-unchanged
    #   unhide-all = update-index --really-refresh
    #   hidden = !git ls-files -v | grep \"^[a-z]\"
    #   ignored = !git status -s --ignored | grep \"^!!\"




    # Amending the previous commit
    # ==================================================================
    ## Amend the previous commit adding the files from index/cached to the previous commit
    amend     = commit --amend
    ## Add the files from the index/cached to the previous commit without changing our message
    amendfile = commit --amend --no-edit
    ## add all the files in our work directory except the new ones to the previous commit
    amendall  = commit --amend --all
    ## Amend the commit message on the last commit
    amend-last-msg = commit --amend -c HEAD
    ## Amend the commit message on a specific commit
    amend-msg = commit --amend -c
    ## Amend the previous commit including the date
    amend-msg-and-time = commit --amend --date=now
    ## Amend the previous commit author and time
    amend-author-and-time = commit --amend --reset-author --no-edit

    # Fetch commands
    # ==============
    # Get all the changes from the server but no merge any of the branches
    fetchall = fetch --all


    # Undo commands
    # =============
    ## Remove the staged changes (This is opposite to git add)
    unstage  = reset HEAD

    clearindex  = reset HEAD

    ## Remove the last commit but keep the changes in the working directory
    uncommit = reset --soft HEAD^


    # Tools
    # ==================================================================
    killspace    = !git stripspace <
    killcomments = !git stripspace --strip-comments <
    addcomments = !git stripspace --comment-lines <

    # Utils
    # ==================================================================
    # Pack the repository and run, this can be used even on a not git repository
    panic       = !tar cvf ../git_panic.tar *
    # Get the repository size
    repo-size   = !git count-objects -v -H | grep -P -o '(?<=size: ).*'
    # Git-doc: Commit everything as a new version
    doc = !git add -A && git cim 'Doc: Updating' 
    wipe = "!git add -u && git cim \"WIP - $(git currentbranch)\""
    wip = "!git add -A && git cim \"WIP - $(git currentbranch)\""

[color]
    ui          = auto
    interactive = auto

[color "branch"]
    current     = yellow reverse
    local       = yellow
    remote      = green

[color "diff"]
    meta        = yellow bold
    frag        = magenta bold
    old         = red bold
    new         = green bold

[color "status"]
    added       = yellow
    changed     = green
    untracked   = cyan

# [merge]
#     tool        = meld
#     summary     = true

[diff]
    algorithm   = patience

[difftool]
    prompt      = false

[mergetool]
    prompt      = false
    keepBackup  = false

[commit]
    template    = ~/.gitmessage

[gui]
    commitmsgwidth = 72

[difftool "meld"]

# [mergetool "vimdiff"]
#     cmd = vimdiff "$LOCAL" "$BASE" "$REMOTE" "$MERGED"
#     conflictstyle = diff3
#     prompt = false

[difftool "vimdiff"]
    cmd = vimdiff $LOCAL $REMOTE

#[mergetool "meld"]
#    cmd = meld --diff $LOCAL $BASE $REMOTE --output $MERGED

# Using p4merge, because it let us diff images
# to call it we have to use git dfp4
[difftool "p4merge"]
    # test expansion
    cmd = ~/workspace/apps/p4v/bin/p4merge $LOCAL $REMOTE

# Allowing to just do `git push` to push the current branch to the configured upstream
[push]
    default = upstream

# Remove empty directory from svn repo as they get removed from local git
[svn]
    rmdir = true

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

##
# Useful filters
##

# Usage: add to your .gitattributes or .git/info/attributes
# *.php filter=spaces2tabs
# Repo in spaces, local using tabs
[filter "spaces2tabs"]
    clean    = expand   --tabs=4 --initial
    smudge   = unexpand --tabs=4 --first-only
    required = true

# Usage: add to your .gitattributes or .git/info/attributes
# *.php filter=tabs2spaces
# Repo in tabs, local using spaces
[filter "tabs2spaces"]
    smudge   = expand   --tabs=4 --initial
    clean    = unexpand --tabs=4 --first-only
    required = true

[merge]
    renormalize = true
	tool = vimdiff
	conflictstyle = diff3
